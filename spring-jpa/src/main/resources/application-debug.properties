spring.application.name=demo-spring-jpa-project(local)
spring.h2.console.enabled=true
# for the following properties, modify later to get values from run time configs
spring.h2.console.path=/h2-demo-data
spring.datasource.url=jdbc:h2:mem:demodb
spring.datasource.username=fuzzy
spring.datasource.password=password
server.port=8081

# using the log level setting below, we can see auto-configuration report. 
# it will have list of positive configuration matches
# and negative configuration matches.
# The property logging.level.root=debug in Spring Boot
#  (or any Java application using SLF4J and a logging framework like Logback)
#  is used to set the root logging level for the entire application.
#  The root logger is the highest-level logger in the logging hierarchy,
#  and setting its level affects the logging behavior of all loggers that
#  don't have a more specific logging level defined.
logging.level.root=debug

# The property spring.jpa.hibernate.ddl-auto=update in Spring Boot is 
# used to configure Hibernate's Database Schema Generation feature. 
# This setting controls how Hibernate manages the schema of your database 
# (e.g., tables, columns, constraints) based on your JPA entity classes.
spring.jpa.hibernate.ddl-auto=update

# The property logging.level.org.springframework=DEBUG is used to
#  enable DEBUG-level logging for all classes within the org.springframework
#  package in a Spring Boot application. 
# This is useful for troubleshooting, debugging, or understanding how 
# Spring's core framework is interacting with your application.
logging.level.org.springframework=DEBUG

# The property logging.level.org.hibernate.SQL=DEBUG 
# is used in a Spring Boot application
#  (or any Java application using Hibernate as the JPA provider)
#  to configure logging for the SQL queries generated by Hibernate.
logging.level.org.hibernate.SQL=DEBUG

# enable detailed logging of SQL parameter bindings in Hibernate. 
# Specifically, it logs the values that Hibernate binds to the SQL 
# queries it generates. 
logging.level.org.hibernate.type.descriptor.sql=TRACE

# The property spring.sql.init.mode=always in Spring Boot is 
# used to control the initialization of the database schema at 
# application startup. Specifically, it tells Spring Boot when to run the
#  SQL scripts that are used to initialize or populate the database.
# spring.sql.init.mode=always

# Specifies the location of the schema SQL file(s)
#  (e.g., classpath:/schema.sql).
# spring.sql.init.schema-locations=classpath:/db/schema.sql

# Specifies the location of the data SQL file(s) 
# (e.g., classpath:/data.sql).
# spring.sql.init.data-locations=classpath:/db/data.sql


# In simple terms, this property allows you to explicitly tell 
# Spring Boot which type of database you're using
#  (e.g., MySQL, PostgreSQL, Oracle) so that Hibernate can generate 
# the right SQL queries based on the database's syntax and features.
# The dialect helps Spring JPA / Hibernate to optimize SQL generation for the specific database by understanding its capabilities and syntax differences. 
# For example, different databases have different ways of handling features like:
# Auto-incrementing columns
# Data types
# Query syntax
# Supported SQL features
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# is used in a Spring Boot application to enable logging of the 
# SQL queries generated by the JPA (Java Persistence API) during the 
# execution of the application.
spring.jpa.show-sql=true

# to format the SQL output, making it easier to read.
spring.jpa.properties.hibernate.format_sql=true
